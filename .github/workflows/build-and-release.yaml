name: Build and Release

on:
  push:
    branches:
      - master

jobs:
  build:
    if: github.event.inputs.ci-mode != 'manual-skip'
    # The job still runs on a standard GitHub-hosted runner,
    # but the steps will execute inside the container specified below.
    runs-on: ubuntu-latest

    # Define the container to use for this job's steps
    container:
      # Use the official Ubuntu 24.10 image from Docker Hub
      image: ubuntu:24.10

    steps:
      # The base ubuntu:24.10 image is minimal. We need to install all
      # necessary tools first, including git for the checkout action.
      # The container runs as root, so 'sudo' is not needed.
      - name: Install Dependencies
        run: |
          apt-get update
          apt-get install -y git build-essential g++-mingw-w64-i686 zip

      - name: Checkout Repository
        uses: actions/checkout@v4

      # Combined the two make steps into one for clarity
      - name: Compile Code
        run: |
          make clean
          make

      - name: Prepare Release
        run: |
          zip release_windows.zip bin/sof_buddy.dll rsrc/win_scripts/patch_sof_binary.ps1 rsrc/win_scripts/set_sofplus_and_buddy_sof.cmd rsrc/win_scripts/set_sofplus_sof.cmd rsrc/win_scripts/set_vanilla_sof.cmd
          zip release_linux_wine.zip bin/sof_buddy.dll rsrc/lin_scripts/patch_sof_binary.sh rsrc/lin_scripts/set_sofplus_and_buddy_sof.sh rsrc/lin_scripts/set_sofplus_sof.sh rsrc/lin_scripts/set_vanilla_sof.sh
        # The working-directory is not strictly necessary here as it's the default, but it's good for clarity.
        working-directory: ${{ github.workspace }}

      - name: Upload Windows Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-windows-artifact
          path: release_windows.zip

      - name: Upload Linux Release Artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-linux-artifact
          path: release_linux_wine.zip

  # The 'release' job does not need to run in the 24.10 container.
  # It only handles artifacts, so using ubuntu-latest is fine and efficient.
  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Windows Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-windows-artifact
          path: windows_release

      - name: Download Linux Release Artifact
        uses: actions/download-artifact@v4
        with:
          name: release-linux-artifact
          path: linux_release

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows_release/release_windows.zip
          asset_name: release_windows.zip
          asset_content_type: application/zip

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linux_release/release_linux_wine.zip
          asset_name: release_linux_wine.zip
          asset_content_type: application/zip